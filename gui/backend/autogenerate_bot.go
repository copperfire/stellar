package backend

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"

	"github.com/stellar/go/clients/horizonclient"

	"github.com/stellar/go/keypair"
	"github.com/stellar/kelp/gui/model"
	"github.com/stellar/kelp/support/toml"
	"github.com/stellar/kelp/trader"
)

const publicTestnetHorizon = "https://horizon-testnet.stellar.org"

var centralizedPricePrecisionOverride = int8(6)
var centralizedVolumePrecisionOverride = int8(1)
var centralizedMinBaseVolumeOverride = float64(30.0)
var centralizedMinQuoteVolumeOverride = float64(10.0)

func (s *APIServer) autogenerateBot(w http.ResponseWriter, r *http.Request) {
	kp, e := keypair.Random()
	if e != nil {
		w.Write([]byte(fmt.Sprintf("error generating keypair: %s\n", e)))
		return
	}

	bot := model.MakeAutogeneratedBot()
	go fundBot(kp.Address(), bot.Name)

	_, e = runBashCommand("mkdir -p " + s.configsPath)
	if e != nil {
		w.Write([]byte(fmt.Sprintf("error running mkdir command: %s\n", e)))
		return
	}

	sampleTrader := makeSampleTrader(kp.Seed())
	filenamePair := bot.Filenames()
	traderFilePath := fmt.Sprintf("%s/%s", s.configsPath, filenamePair.Trader)
	log.Printf("writing autogenerated bot config to file: %s\n", traderFilePath)
	e = toml.WriteFile(traderFilePath, sampleTrader)
	if e != nil {
		w.WriteHeader(http.StatusInternalServerError)
		w.Write([]byte(fmt.Sprintf("error writing toml file: %s\n", e)))
		return
	}

	botJson, e := json.Marshal(*bot)
	if e != nil {
		w.WriteHeader(http.StatusInternalServerError)
		w.Write([]byte(fmt.Sprintf("unable to serialize bot: %s\n", e)))
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write(botJson)
}

func fundBot(address string, botName string) {
	client := horizonclient.DefaultTestNetClient
	txSuccess, e := client.Fund(address)
	if e != nil {
		log.Printf("error funding address %s for bot '%s': %s\n", address, botName, e)
	} else {
		log.Printf("successfully funded account %s for bot '%s': %s\n", address, botName, txSuccess.TransactionSuccessToString())
	}
}

func makeSampleTrader(seed string) *trader.BotConfig {
	return trader.MakeBotConfig(
		"",
		seed,
		"XLM",
		"",
		"COUPON",
		"GBMMZMK2DC4FFP4CAI6KCVNCQ7WLO5A7DQU7EC7WGHRDQBZB763X4OQI",
		300,
		0,
		5,
		"both",
		0,
		0,
		publicTestnetHorizon,
		nil,
		&trader.FeeConfig{
			CapacityTrigger: 0.8,
			Percentile:      90,
			MaxOpFeeStroops: 5000,
		},
		&centralizedPricePrecisionOverride,
		&centralizedVolumePrecisionOverride,
		&centralizedMinBaseVolumeOverride,
		&centralizedMinQuoteVolumeOverride,
	)
}
