package backend

import (
	"fmt"
	"log"
	"net/http"

	"github.com/stellar/go/keypair"
	"github.com/stellar/kelp/support/toml"
	"github.com/stellar/kelp/trader"
)

func (s *APIServer) autogenerateBot(w http.ResponseWriter, r *http.Request) {
	kp, e := keypair.Random()
	if e != nil {
		w.Write([]byte(fmt.Sprintf("error generating keypair: %s\n", e)))
		return
	}

	centralizedPricePrecisionOverride := int8(6)
	centralizedVolumePrecisionOverride := int8(1)
	centralizedMinBaseVolumeOverride := float64(30.0)
	centralizedMinQuoteVolumeOverride := float64(10.0)
	sampleTrader := trader.MakeBotConfig(
		"",
		kp.Seed(),
		"XLM",
		"",
		"COUPON",
		"GBMMZMK2DC4FFP4CAI6KCVNCQ7WLO5A7DQU7EC7WGHRDQBZB763X4OQI",
		300,
		0,
		5,
		"both",
		0,
		0,
		"https://horizon-testnet.stellar.org",
		nil,
		&trader.FeeConfig{
			CapacityTrigger: 0.8,
			Percentile:      90,
			MaxOpFeeStroops: 5000,
		},
		&centralizedPricePrecisionOverride,
		&centralizedVolumePrecisionOverride,
		&centralizedMinBaseVolumeOverride,
		&centralizedMinQuoteVolumeOverride,
	)

	_, e = runBashCommand("mkdir -p " + s.configsPath)
	if e != nil {
		w.Write([]byte(fmt.Sprintf("error running mkdir command: %s\n", e)))
		return
	}

	filePath := s.configsPath + "/autogenerated_test_bot.cfg"
	log.Printf("writing autogenerated bot config to file: %s\n", filePath)

	e = toml.WriteFile(filePath, sampleTrader)
	if e != nil {
		w.WriteHeader(http.StatusInternalServerError)
		w.Write([]byte(fmt.Sprintf("error writing toml file: %s\n", e)))
		return
	}

	w.WriteHeader(http.StatusOK)
}
